For each test your code failed, we have listed the points deducted and the most likely reason:

(Bstart)	-100
start() call fails.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Bstart)	-100
start() call fails.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Bstart)	-100
start() call fails.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Bstart)	-100
start() call fails.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddabtrd)	-100
Query of flight/rooms/cars/customer does not return correct result after an abort.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddabtrd)	-100
Query of flight/rooms/cars/customer does not return correct result after an abort.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddabtrd)	-100
Query of flight/rooms/cars/customer does not return correct result after an abort.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddabtrd)	-100
Query of flight/rooms/cars/customer does not return correct result after an abort.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddabtrd)	-100
Query of flight/rooms/cars/customer does not return correct result after an abort.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddabtrd)	-100
Query of flight/rooms/cars/customer does not return correct result after an abort.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddcmt)	-100
commit fails after adding flight/rooms/cars/customer.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddcmt)	-100
commit fails after adding flight/rooms/cars/customer.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddcmt)	-100
commit fails after adding flight/rooms/cars/customer.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddcmtrd)	-100
Query of flight/rooms/cars/customer does not return correct result.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddcmtrd)	-100
Query of flight/rooms/cars/customer does not return correct result.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddabtrd)	-100
Query of flight/rooms/cars/customer does not return correct result after an abort.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddabtrd)	-100
Query of flight/rooms/cars/customer does not return correct result after an abort.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddabtrd)	-100
Query of flight/rooms/cars/customer does not return correct result after an abort.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddabtrd)	-100
Query of flight/rooms/cars/customer does not return correct result after an abort.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddabtrd)	-100
Query of flight/rooms/cars/customer does not return correct result after an abort.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddcmtrd)	-100
Query of flight/rooms/cars/customer does not return correct result.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddabtrd)	-100
Query of flight/rooms/cars/customer does not return correct result after an abort.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddabtrd)	-100
Query of flight/rooms/cars/customer does not return correct result after an abort.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddcmt)	-100
commit fails after adding flight/rooms/cars/customer.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddcmt)	-100
commit fails after adding flight/rooms/cars/customer.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddcmt)	-100
commit fails after adding flight/rooms/cars/customer.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddcmt)	-100
commit fails after adding flight/rooms/cars/customer.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddabtrd)	-100
Query of flight/rooms/cars/customer does not return correct result after an abort.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddabtrd)	-100
Query of flight/rooms/cars/customer does not return correct result after an abort.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddcmt)	-100
commit fails after adding flight/rooms/cars/customer.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Stoomanyrsv)	-3
Allows reservation of more than available items.

(Sdelreserved)	-3
Allows delete of flight with reservations.

(Sprsvprc)	-3
Price is not preserved when adding with price less than 0.

(Saddrd)	-3
Cannot query items added earlier in same transaction.

(Saddcmtdelrsv)	-3
Allows reservation of items deleted earlier in same transaction.

(Sbadxid)	-3
Bogus xid does not throw InvalidTransactionException.

(Sshutdown)	-0
shutdown does not immediately exit.

(Ldelres)	-5
delete locks customer's reservations.

(Lnonexi)	-5
query does not acquire lock on non-existent items.

(Ldelcus)	-5
deleteCustomer does not lock and un-reserve reservations.

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 24/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Stoomanyrsv)	-3
Allows reservation of more than available items.

(Sdelreserved)	-3
Allows delete of flight with reservations.

(Sprsvprc)	-3
Price is not preserved when adding with price less than 0.

(Saddrd)	-3
Cannot query items added earlier in same transaction.

(Saddcmtdelrsv)	-3
Allows reservation of items deleted earlier in same transaction.

(Sbadxid)	-3
Bogus xid does not throw InvalidTransactionException.

(Sshutdown)	-0
shutdown does not immediately exit.

(Ldelres)	-5
delete locks customer's reservations.

(Lnonexi)	-5
query does not acquire lock on non-existent items.

(Ldelcus)	-5
deleteCustomer does not lock and un-reserve reservations.

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 24/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Stoomanyrsv)	-3
Allows reservation of more than available items.

(Sdelreserved)	-3
Allows delete of flight with reservations.

(Sbill)	-3
Does not compute correct bill.

(Sprsvprc)	-3
Price is not preserved when adding with price less than 0.

(Saddrd)	-3
Cannot query items added earlier in same transaction.

(Saddcmtdelrsv)	-3
Allows reservation of items deleted earlier in same transaction.

(Sbadxid)	-3
Bogus xid does not throw InvalidTransactionException.

(Sshutdown)	-0
shutdown does not immediately exit.

(Ldelres)	-5
delete locks customer's reservations.

(Lnonexi)	-5
query does not acquire lock on non-existent items.

(Ldelcus)	-5
deleteCustomer does not lock and un-reserve reservations.

(Lbillprc)	-5
queryCustomerBill does not read-lock prices.

(Lbillres)	-5
queryCustomerBill does not lock to prevent new reservations.

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 11/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Sdelreserved)	-3
Allows delete of flight with reservations.

(Sbill)	-3
Does not compute correct bill.

(Sprsvprc)	-3
Price is not preserved when adding with price less than 0.

(Saddrd)	-3
Cannot query items added earlier in same transaction.

(Sbadxid)	-3
Bogus xid does not throw InvalidTransactionException.

(Sshutdown)	-0
shutdown does not immediately exit.

(Ldelres)	-5
delete locks customer's reservations.

(Lnonexi)	-5
query does not acquire lock on non-existent items.

(Ldelcus)	-5
deleteCustomer does not lock and un-reserve reservations.

(Lbillprc)	-5
queryCustomerBill does not read-lock prices.

(Lbillres)	-5
queryCustomerBill does not lock to prevent new reservations.

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 17/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Sdelreserved)	-3
Allows delete of flight with reservations.

(Sbill)	-3
Does not compute correct bill.

(Sprsvprc)	-3
Price is not preserved when adding with price less than 0.

(Saddrd)	-3
Cannot query items added earlier in same transaction.

(Sbadxid)	-3
Bogus xid does not throw InvalidTransactionException.

(Sshutdown)	-0
shutdown does not immediately exit.

(Ldelres)	-5
delete locks customer's reservations.

(Lnonexi)	-5
query does not acquire lock on non-existent items.

(Ldelcus)	-5
deleteCustomer does not lock and un-reserve reservations.

(Lbillprc)	-5
queryCustomerBill does not read-lock prices.

(Lbillres)	-5
queryCustomerBill does not lock to prevent new reservations.

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 17/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Sdelreserved)	-3
Allows delete of flight with reservations.

(Sbill)	-3
Does not compute correct bill.

(Sprsvprc)	-3
Price is not preserved when adding with price less than 0.

(Saddrd)	-3
Cannot query items added earlier in same transaction.

(Sbadxid)	-3
Bogus xid does not throw InvalidTransactionException.

(Sshutdown)	-0
shutdown does not immediately exit.

(Ldelres)	-5
delete locks customer's reservations.

(Lnonexi)	-5
query does not acquire lock on non-existent items.

(Ldelcus)	-5
deleteCustomer does not lock and un-reserve reservations.

(Lbillprc)	-5
queryCustomerBill does not read-lock prices.

(Lbillres)	-5
queryCustomerBill does not lock to prevent new reservations.

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 17/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Sdelreserved)	-3
Allows delete of flight with reservations.

(Sbill)	-3
Does not compute correct bill.

(Sprsvprc)	-3
Price is not preserved when adding with price less than 0.

(Saddrd)	-3
Cannot query items added earlier in same transaction.

(Sbadxid)	-3
Bogus xid does not throw InvalidTransactionException.

(Sshutdown)	-0
shutdown does not immediately exit.

(Ldelres)	-5
delete locks customer's reservations.

(Lnonexi)	-5
query does not acquire lock on non-existent items.

(Ldelcus)	-5
deleteCustomer does not lock and un-reserve reservations.

(Lbillprc)	-5
queryCustomerBill does not read-lock prices.

(Lbillres)	-5
queryCustomerBill does not lock to prevent new reservations.

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 17/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Sdelreserved)	-3
Allows delete of flight with reservations.

(Sbill)	-3
Does not compute correct bill.

(Sprsvprc)	-3
Price is not preserved when adding with price less than 0.

(Saddrd)	-3
Cannot query items added earlier in same transaction.

(Sbadxid)	-3
Bogus xid does not throw InvalidTransactionException.

(Sshutdown)	-0
shutdown does not immediately exit.

(Ldelres)	-5
delete locks customer's reservations.

(Lnonexi)	-5
query does not acquire lock on non-existent items.

(Ldelcus)	-5
deleteCustomer does not lock and un-reserve reservations.

(Lbillprc)	-5
queryCustomerBill does not read-lock prices.

(Lbillres)	-5
queryCustomerBill does not lock to prevent new reservations.

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 17/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Sprsvprc)	-3
Price is not preserved when adding with price less than 0.

(Saddrd)	-3
Cannot query items added earlier in same transaction.

(Sbadxid)	-3
Bogus xid does not throw InvalidTransactionException.

(Sshutdown)	-0
shutdown does not immediately exit.

(Lnonexi)	-5
query does not acquire lock on non-existent items.

(Ldelcus)	-5
deleteCustomer does not lock and un-reserve reservations.

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 38/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Saddrd)	-3
Cannot query items added earlier in same transaction.

(Sbadxid)	-3
Bogus xid does not throw InvalidTransactionException.

(Sshutdown)	-0
shutdown does not immediately exit.

(Lnonexi)	-5
query does not acquire lock on non-existent items.

(Ldelcus)	-5
deleteCustomer does not lock and un-reserve reservations.

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 41/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Saddcmtdelrsv)	-3
Allows reservation of items deleted earlier in same transaction.

(Sbadxid)	-3
Bogus xid does not throw InvalidTransactionException.

(Sshutdown)	-0
shutdown does not immediately exit.

(Lnonexi)	-5
query does not acquire lock on non-existent items.

(Ldelcus)	-5
deleteCustomer does not lock and un-reserve reservations.

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 41/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Sbadxid)	-3
Bogus xid does not throw InvalidTransactionException.

(Sshutdown)	-0
shutdown does not immediately exit.

(Lnonexi)	-5
query does not acquire lock on non-existent items.

(Ldelcus)	-5
deleteCustomer does not lock and un-reserve reservations.

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 44/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Sshutdown)	-0
shutdown does not immediately exit.

(Lnonexi)	-5
query does not acquire lock on non-existent items.

(Ldelcus)	-5
deleteCustomer does not lock and un-reserve reservations.

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 47/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Lnonexi)	-5
query does not acquire lock on non-existent items.

(Ldelcus)	-5
deleteCustomer does not lock and un-reserve reservations.

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 47/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Ldelcus)	-5
deleteCustomer does not lock and un-reserve reservations.

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 52/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Ldelcus)	-5
deleteCustomer does not lock and un-reserve reservations.

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 52/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Ldelcus)	-5
deleteCustomer does not lock and un-reserve reservations.

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 52/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 57/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 57/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 57/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Ldeadlock)	-3
Deadlocked transaction is not aborted.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 57/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 60/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddabt)	-100
abort fails after adding flight/rooms/cars/customer.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 65/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddcmtrd)	-100
Query of flight/rooms/cars/customer does not return correct result.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddcmtrd)	-100
Query of flight/rooms/cars/customer does not return correct result.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Stoomanydel)	-3
Allows delete of more than available items.

(Lbillres)	-5
queryCustomerBill does not lock to prevent new reservations.

(Lcmtother)	-5
One transaction commits another transaction's changes.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 52/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Saddcmtdelcmt)	-10
Cannot delete items.

(Saddcmtdelrsv)	-3
Allows reservation of items deleted earlier in same transaction.

(Ldel)	-5
delete does not acquire exclusive lock.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 47/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 65/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddcmtrd)	-100
Query of flight/rooms/cars/customer does not return correct result.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddcmtrd)	-100
Query of flight/rooms/cars/customer does not return correct result.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Fadddiexid)	-1
Forcibly aborted transaction does not throw TransactionAbortedException.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 79/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Fadddiexid)	-1
Forcibly aborted transaction does not throw TransactionAbortedException.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 79/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Bstart)	-100
start() call fails.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Fadddiexid)	-1
Forcibly aborted transaction does not throw TransactionAbortedException.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 79/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddcmt)	-100
commit fails after adding flight/rooms/cars/customer.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Bstart)	-100
start() call fails.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Baddcmt)	-100
commit fails after adding flight/rooms/cars/customer.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Fadddierd)	-5
After failure, transaction is not forcibly aborted.

(Fadddiexid)	-1
Forcibly aborted transaction does not throw TransactionAbortedException.

(Fdieb4)	-10
dieBeforePointerSwitch fails.

(Fdieaft)	-10
dieAfterPointerSwitch fails.

============================================
Your final score is 74/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Bstart)	-100
start() call fails.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Bstart)	-100
start() call fails.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Bstart)	-100
start() call fails.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Fadddierd)	-5
After failure, transaction is not forcibly aborted.

(Fadddiexid)	-1
Forcibly aborted transaction does not throw TransactionAbortedException.

(Fdieb4)	-10
dieBeforePointerSwitch fails.

(Fdieaft)	-10
dieAfterPointerSwitch fails.

============================================
Your final score is 74/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Bstart)	-100
start() call fails.

============================================
Your final score is 0/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Fadddierd)	-5
After failure, transaction is not forcibly aborted.

(Fadddiexid)	-1
Forcibly aborted transaction does not throw TransactionAbortedException.

(Fdieb4)	-10
dieBeforePointerSwitch fails.

(Fdieaft)	-10
dieAfterPointerSwitch fails.

============================================
Your final score is 74/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 65/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Fadddiexid)	-1
Forcibly aborted transaction does not throw TransactionAbortedException.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 79/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Fadddiexid)	-1
Forcibly aborted transaction does not throw TransactionAbortedException.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 79/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Sbadxid)	-3
Bogus xid does not throw InvalidTransactionException.

(Fdieb4cmt)	-10
After dieBeforePointerSwitch is set, server does not die during commit.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 77/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Sbadxid)	-3
Bogus xid does not throw InvalidTransactionException.

(Fdieb4self)	-10
After dieBeforePointerSwitch, transaction is not forcibly aborted, or previous committed transactions are lost.

(Fdieaftcmt)	-10
After dieAfterPointerSwitch is set, server does not die during commit.

============================================
Your final score is 77/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Sbadxid)	-3
Bogus xid does not throw InvalidTransactionException.

(Fdieaftself)	-10
After dieAfterPointerSwitch, transaction is not committed, or previous committed transactions are lost.

============================================
Your final score is 87/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Sbadxid)	-3
Bogus xid does not throw InvalidTransactionException.

(Faddcmtdierd)	-15
After failure, previous committed transactions are lost.

(Fdieb4self)	-10
After dieBeforePointerSwitch, transaction is not forcibly aborted, or previous committed transactions are lost.

(Fdieaftself)	-10
After dieAfterPointerSwitch, transaction is not committed, or previous committed transactions are lost.

============================================
Your final score is 62/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Sbadxid)	-3
Bogus xid does not throw InvalidTransactionException.

(Fdieaftself)	-10
After dieAfterPointerSwitch, transaction is not committed, or previous committed transactions are lost.

============================================
Your final score is 87/100
For each test your code failed, we have listed the points deducted and the most likely reason:

(Sbadxid)	-3
Bogus xid does not throw InvalidTransactionException.

(Fadddiexid)	-1
Forcibly aborted transaction does not throw TransactionAbortedException.

============================================
Your final score is 96/100
For each test your code failed, we have listed the points deducted and the most likely reason:

============================================
Your final score is 100/100
